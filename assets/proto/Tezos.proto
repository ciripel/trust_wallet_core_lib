syntax = "proto3";

package TW.Tezos.Proto;
option java_package = "wallet.core.jni.proto";

// Input data necessary to create a signed Tezos transaction.
// Next field: 3
message SigningInput {
  OperationList operation_list = 1;
  bytes private_key = 2;
}

// Transaction signing output.
// Next field: 2
message SigningOutput {
  bytes encoded = 1;
}

// A list of operations and a branch.
// Next field: 3
message OperationList {
  string branch = 1;
  repeated Operation operations = 2;
}

// An operation that can be applied to the Tezos blockchain.
// Next field: 12
message Operation {
  int64 counter = 1;
  string source = 2;
  int64 fee = 3;
  int64 gas_limit = 4;
  int64 storage_limit = 5;

  enum OperationKind {
    // Note: Proto3 semantics require a zero value.
    ENDORSEMENT = 0;

    REVEAL = 107;
    TRANSACTION = 108;
    DELEGATION = 110;
  }
  OperationKind kind = 7;

  // Operation specific data depending on the type of the operation.
  oneof operation_data {
    RevealOperationData reveal_operation_data = 8;
    TransactionOperationData transaction_operation_data = 9;
    DelegationOperationData delegation_operation_data = 11;
  }
}

message FA12Parameters {
  string entrypoint = 1;
  string from = 2;
  string to = 3;
  string value = 4;
}

message Txs {
  string to = 1;
  string token_id = 2;
  string amount = 3;
}

message TxObject {
  string from = 1;
  repeated Txs txs = 2;
}

message FA2Parameters {
  string entrypoint = 1;
  repeated TxObject txs_object = 2;
}

message OperationParameters {
  oneof parameters {
    FA12Parameters fa12_parameters = 1;
    FA2Parameters fa2_parameters = 2;
  }
}

// Transaction operation specific data.
// Next field: 3
message TransactionOperationData {
  string destination = 1;
  int64 amount = 2;
  OperationParameters parameters = 3;
}

// Reveal operation specific data.
// Next field: 2
message RevealOperationData {
  bytes public_key = 1;
}

// Delegation operation specific data.
// Next field: 2
message DelegationOperationData {
  string delegate = 1;
}
